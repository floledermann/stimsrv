const stream = require('stream')

const deepEqual = require("fast-deep-equal");
const createCanvas = require("canvas").createCanvas;

const warnDefaults = require("../../util/warnDefaults.js");

module.exports = function(experiment, controller) {
  
  return function(client, role) {
    
    let lastMessage = null;
    let lastMessageData = null;
    
    let taskIndex = -1;
    let currentTaskUI = null;
    let currentContext = null;
    let currentCondition = null;
    
    let localContext = {
      clientid: client.id,
      device: client,
      role: role, 
    };

    function getResourceURL(id, path) {
      return "/static/resources/" + id + "/" + path;
    }
    
    function warn(message, data) {
      controller.warn(message, data);
    }
    
    function showCondition(task, condition) {
      
      currentCondition = condition;
      
    }    
    
    return {
      message: function(type, data) {
        lastMessage = type;
        lastMessageData = data;
        
        if (type == "condition") {        
          if (currentTaskUI === null || data.taskIndex != taskIndex || !deepEqual(currentContext, data.context)) {          
            throw new Error("Task condition without initialization", data);           
          }
          showCondition(currentTaskUI, data.condition);
        }
        
        if (type == "task init") {
          
          taskIndex = data.taskIndex;
          currentContext = data.context;
          let fullContext = Object.assign({}, currentContext, localContext);
          
          currentTaskUI = experiment.tasks[data.taskIndex].ui(fullContext);

          if (data.condition) {
            showCondition(currentTaskUI, data.condition);
          }
        }
      },
      
      render: function(req, res) {
        if (req.path == "/image/") {
          const canvas = createCanvas(200, 200);
          const ctx = canvas.getContext('2d');
          
          let uiOptions = Object.assign({
            pixeldensity: warnDefaults.value(warn, "pixeldensity", 96),
            gamma: warnDefaults.value(warn, "gamma", 2.2),
            viewingdistance: warnDefaults.value(warn, "viewingdistance", 600),
            ambientIntensity: warnDefaults.value(warn, "ambientIntensity", 1/100)
          }, client);
            
          // set callback functions
          Object.assign(uiOptions, {
            warn: warn,
            event: function(event){ warn("Events are not supported in browser-simple client"); },
            response: function(response){ warn("Responses generated by UI are not supported in browser-simple client"); },
            getResourceURL: getResourceURL
          })
                
          let ui = currentTaskUI.interfaces[role.role + ".display"] || currentTaskUI.interfaces["display"];
               
          if (ui && ui.renderToCanvas) {
            ui.renderToCanvas(ctx, currentCondition, currentContext, uiOptions);
          }
          else {
            if (ui && !ui.renderToCanvas) {
              warn("Task is missing renderToCanvas() method required for rendering for browser-simple.");
            }
            ctx.fillStyle = "#000000";
            ctx.fillRect(0,0,200,200);
          }

          
          let stream = canvas.createPNGStream();
          
          stream.pipe(res);
               
        }
        else {
          res.render("experiment-simplebrowser.html", {
            message: lastMessage,
            data: lastMessageData,
            role: req.clientRole,
          });
        }
      }
      
    }
  }

}